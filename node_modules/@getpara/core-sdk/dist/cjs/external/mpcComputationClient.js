var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var mpcComputationClient_exports = {};
__export(mpcComputationClient_exports, {
  initClient: () => initClient
});
module.exports = __toCommonJS(mpcComputationClient_exports);
var import_axios = __toESM(require("axios"));
function initClient(baseURL, useAdapter) {
  const client = import_axios.default.create({ baseURL });
  if (useAdapter) {
    client.defaults.adapter = function(config) {
      return fetch(config.baseURL + config.url, {
        method: config.method,
        headers: config.headers,
        body: config.data,
        credentials: config.withCredentials ? "include" : void 0
      }).then(
        (response) => response.text().then((text) => ({
          data: text,
          status: response.status,
          statusText: response.statusText,
          headers: response.headers,
          config,
          request: fetch
        }))
      ).catch(function(reason) {
        throw reason;
      });
    };
  }
  return client;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  initClient
});

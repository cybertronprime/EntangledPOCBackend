var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var userManagementClient_exports = {};
__export(userManagementClient_exports, {
  getBaseMPCNetworkUrl: () => getBaseMPCNetworkUrl,
  getBaseOAuthUrl: () => getBaseOAuthUrl,
  getBaseUrl: () => getBaseUrl,
  initClient: () => initClient
});
module.exports = __toCommonJS(userManagementClient_exports);
var import_user_management_client = __toESM(require("@getpara/user-management-client"));
var import_types = require("../types/index.js");
function getBaseOAuthUrl(env) {
  switch (env) {
    case import_types.Environment.DEV:
      return "http://localhost:8080/";
    case import_types.Environment.SANDBOX:
      return "https://api.sandbox.usecapsule.com/";
    case import_types.Environment.BETA:
      return "https://api.beta.usecapsule.com/";
    case import_types.Environment.PROD:
      return "https://api.usecapsule.com/";
    default:
      throw new Error(`unsupported env: ${env}`);
  }
}
function getBaseUrl(env) {
  switch (env) {
    case import_types.Environment.DEV:
      return "http://localhost:8080/";
    case import_types.Environment.SANDBOX:
      return "https://api.sandbox.getpara.com/";
    case import_types.Environment.BETA:
      return "https://api.beta.getpara.com/";
    case import_types.Environment.PROD:
      return "https://api.getpara.com/";
    default:
      throw new Error(`unsupported env: ${env}`);
  }
}
function getBaseMPCNetworkUrl(env, useWebsocket) {
  const prefix = useWebsocket ? "ws" : "http";
  switch (env) {
    case import_types.Environment.DEV:
      return `${prefix}://localhost:3000`;
    case import_types.Environment.SANDBOX:
      return `${prefix}s://mpc-network.sandbox.getpara.com`;
    case import_types.Environment.BETA:
      return `${prefix}s://mpc-network.beta.getpara.com`;
    case import_types.Environment.PROD:
      return `${prefix}s://mpc-network.prod.getpara.com`;
    default:
      throw new Error(`unsupported env: ${env}`);
  }
}
function initClient({
  env,
  version,
  apiKey,
  partnerId,
  useFetchAdapter = false,
  retrieveSessionCookie,
  persistSessionCookie
}) {
  return new import_user_management_client.default({
    userManagementHost: getBaseUrl(env),
    version: [import_types.Environment.DEV, import_types.Environment.SANDBOX].includes(env) ? "dev" : version,
    apiKey,
    partnerId,
    opts: { useFetchAdapter },
    retrieveSessionCookie,
    persistSessionCookie
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getBaseMPCNetworkUrl,
  getBaseOAuthUrl,
  getBaseUrl,
  initClient
});

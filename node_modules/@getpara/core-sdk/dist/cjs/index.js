var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var src_exports = {};
__export(src_exports, {
  AccountLinkError: () => import_types.AccountLinkError,
  AuthMethod: () => import_user_management_client.AuthMethod,
  COSMOS_WALLETS: () => import_user_management_client.COSMOS_WALLETS,
  EVM_WALLETS: () => import_user_management_client.EVM_WALLETS,
  EXTERNAL_WALLET_TYPES: () => import_user_management_client.EXTERNAL_WALLET_TYPES,
  EmailTheme: () => import_user_management_client.EmailTheme,
  KeyContainer: () => import_KeyContainer.KeyContainer,
  LINKED_ACCOUNT_TYPES: () => import_user_management_client.LINKED_ACCOUNT_TYPES,
  NON_ED25519: () => import_user_management_client.NON_ED25519,
  Network: () => import_user_management_client.Network,
  OAUTH_METHODS: () => import_user_management_client.OAUTH_METHODS,
  OAuthMethod: () => import_user_management_client.OAuthMethod,
  OnRampAsset: () => import_user_management_client.OnRampAsset,
  OnRampMethod: () => import_types.OnRampMethod,
  OnRampProvider: () => import_user_management_client.OnRampProvider,
  OnRampPurchaseStatus: () => import_user_management_client.OnRampPurchaseStatus,
  OnRampPurchaseType: () => import_user_management_client.OnRampPurchaseType,
  PARA_STORAGE_PREFIX: () => import_constants.PARA_PREFIX,
  PREGEN_IDENTIFIER_TYPES: () => import_user_management_client.PREGEN_IDENTIFIER_TYPES,
  PopupType: () => import_types.PopupType,
  PregenIdentifierType: () => import_types.PregenIdentifierType,
  RecoveryStatus: () => import_types.RecoveryStatus,
  SOLANA_WALLETS: () => import_user_management_client.SOLANA_WALLETS,
  STORAGE_PREFIX: () => import_constants.PREFIX,
  WALLET_SCHEMES: () => import_user_management_client.WALLET_SCHEMES,
  WALLET_TYPES: () => import_user_management_client.WALLET_TYPES,
  WalletScheme: () => import_user_management_client.WalletScheme,
  WalletType: () => import_user_management_client.WalletType,
  constructUrl: () => import_utils.constructUrl,
  decryptPrivateKey: () => import_utils2.decryptPrivateKey,
  decryptPrivateKeyAndDecryptShare: () => import_utils2.decryptPrivateKeyAndDecryptShare,
  decryptPrivateKeyWithPassword: () => import_utils2.decryptPrivateKeyWithPassword,
  decryptWithKeyPair: () => import_utils2.decryptWithKeyPair,
  decryptWithPrivateKey: () => import_utils2.decryptWithPrivateKey,
  default: () => src_default,
  distributeNewShare: () => import_shareDistribution.distributeNewShare,
  encodePrivateKeyToPemHex: () => import_utils2.encodePrivateKeyToPemHex,
  encryptPrivateKey: () => import_utils2.encryptPrivateKey,
  encryptPrivateKeyWithPassword: () => import_utils2.encryptPrivateKeyWithPassword,
  encryptWithDerivedPublicKey: () => import_utils2.encryptWithDerivedPublicKey,
  entityToWallet: () => import_utils.entityToWallet,
  getAsymmetricKeyPair: () => import_utils2.getAsymmetricKeyPair,
  getBaseUrl: () => import_userManagementClient.getBaseUrl,
  getDerivedPrivateKeyAndDecrypt: () => import_utils2.getDerivedPrivateKeyAndDecrypt,
  getNetworkPrefix: () => import_onRamps.getNetworkPrefix,
  getOnRampAssets: () => import_onRamps.getOnRampAssets,
  getOnRampNetworks: () => import_onRamps.getOnRampNetworks,
  getPortalBaseURL: () => import_url.getPortalBaseURL,
  getPortalDomain: () => import_utils.getPortalDomain,
  getPublicKeyFromSignature: () => import_utils2.getPublicKeyFromSignature,
  getPublicKeyHex: () => import_utils2.getPublicKeyHex,
  getSHA256HashHex: () => import_utils2.getSHA256HashHex,
  hashPasswordWithSalt: () => import_utils2.hashPasswordWithSalt,
  initClient: () => import_userManagementClient.initClient,
  isWalletSupported: () => import_wallet.isWalletSupported,
  mpcComputationClient: () => mpcComputationClient,
  paraVersion: () => paraVersion,
  publicKeyFromHex: () => import_utils2.publicKeyFromHex,
  shortenUrl: () => import_utils.shortenUrl,
  toAssetInfoArray: () => import_onRamps.toAssetInfoArray,
  transmissionUtilsRetrieve: () => import_transmissionUtils.retrieve
});
module.exports = __toCommonJS(src_exports);
var import_ParaCore = require("./ParaCore.js");
var import_user_management_client = require("@getpara/user-management-client");
var import_types = require("./types/index.js");
__reExport(src_exports, require("./types/coreApi.js"), module.exports);
__reExport(src_exports, require("./types/events.js"), module.exports);
__reExport(src_exports, require("./types/config.js"), module.exports);
var import_utils = require("./utils/index.js");
var import_constants = require("./constants.js");
var import_shareDistribution = require("./shares/shareDistribution.js");
var import_KeyContainer = require("./shares/KeyContainer.js");
var import_userManagementClient = require("./external/userManagementClient.js");
var mpcComputationClient = __toESM(require("./external/mpcComputationClient.js"));
var import_utils2 = require("./cryptography/utils.js");
__reExport(src_exports, require("./external/userManagementClient.js"), module.exports);
__reExport(src_exports, require("./errors.js"), module.exports);
__reExport(src_exports, require("./utils/formatting.js"), module.exports);
__reExport(src_exports, require("./utils/polling.js"), module.exports);
__reExport(src_exports, require("./utils/phone.js"), module.exports);
var import_wallet = require("./utils/wallet.js");
var import_onRamps = require("./utils/onRamps.js");
var import_url = require("./utils/url.js");
var import_transmissionUtils = require("./transmission/transmissionUtils.js");
const paraVersion = import_ParaCore.ParaCore.version;
var src_default = import_ParaCore.ParaCore;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AccountLinkError,
  AuthMethod,
  COSMOS_WALLETS,
  EVM_WALLETS,
  EXTERNAL_WALLET_TYPES,
  EmailTheme,
  KeyContainer,
  LINKED_ACCOUNT_TYPES,
  NON_ED25519,
  Network,
  OAUTH_METHODS,
  OAuthMethod,
  OnRampAsset,
  OnRampMethod,
  OnRampProvider,
  OnRampPurchaseStatus,
  OnRampPurchaseType,
  PARA_STORAGE_PREFIX,
  PREGEN_IDENTIFIER_TYPES,
  PopupType,
  PregenIdentifierType,
  RecoveryStatus,
  SOLANA_WALLETS,
  STORAGE_PREFIX,
  WALLET_SCHEMES,
  WALLET_TYPES,
  WalletScheme,
  WalletType,
  constructUrl,
  decryptPrivateKey,
  decryptPrivateKeyAndDecryptShare,
  decryptPrivateKeyWithPassword,
  decryptWithKeyPair,
  decryptWithPrivateKey,
  distributeNewShare,
  encodePrivateKeyToPemHex,
  encryptPrivateKey,
  encryptPrivateKeyWithPassword,
  encryptWithDerivedPublicKey,
  entityToWallet,
  getAsymmetricKeyPair,
  getBaseUrl,
  getDerivedPrivateKeyAndDecrypt,
  getNetworkPrefix,
  getOnRampAssets,
  getOnRampNetworks,
  getPortalBaseURL,
  getPortalDomain,
  getPublicKeyFromSignature,
  getPublicKeyHex,
  getSHA256HashHex,
  hashPasswordWithSalt,
  initClient,
  isWalletSupported,
  mpcComputationClient,
  paraVersion,
  publicKeyFromHex,
  shortenUrl,
  toAssetInfoArray,
  transmissionUtilsRetrieve,
  ...require("./types/coreApi.js"),
  ...require("./types/events.js"),
  ...require("./types/config.js"),
  ...require("./external/userManagementClient.js"),
  ...require("./errors.js"),
  ...require("./utils/formatting.js"),
  ...require("./utils/polling.js"),
  ...require("./utils/phone.js")
});

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var KeyContainer_exports = {};
__export(KeyContainer_exports, {
  KeyContainer: () => KeyContainer
});
module.exports = __toCommonJS(KeyContainer_exports);
var import_ecies = require("@celo/utils/lib/ecies.js");
var eutil = __toESM(require("@ethereumjs/util"));
var forge = __toESM(require("node-forge"));
class KeyContainer {
  constructor(walletId, keyshare, address) {
    this.walletId = walletId;
    this.keyshare = keyshare;
    this.address = address;
    this.backupDecryptionKey = Buffer.from(forge.random.getBytesSync(32), "binary").toString("hex");
  }
  static buildFrom(serializedContainer) {
    try {
      const parsedObject = JSON.parse(serializedContainer);
      return Object.assign(new KeyContainer("", "", ""), parsedObject);
    } catch (e) {
      const container = new KeyContainer("", "", "");
      container.backupDecryptionKey = serializedContainer.split("|")[0];
      return container;
    }
  }
  getPublicEncryptionKey() {
    return Buffer.from(eutil.privateToPublic(Buffer.from(this.backupDecryptionKey, "hex")));
  }
  getPublicEncryptionKeyHex() {
    return this.getPublicEncryptionKey().toString("hex");
  }
  encryptForSelf(backup) {
    try {
      const pubkey = this.getPublicEncryptionKey();
      const data = (0, import_ecies.Encrypt)(pubkey, Buffer.from(backup, "ucs2")).toString("base64");
      return data;
    } catch (error) {
      throw Error("Error encrypting backup");
    }
  }
  static encryptWithPublicKey(publicKey, backup) {
    try {
      const data = (0, import_ecies.Encrypt)(publicKey, Buffer.from(backup, "ucs2")).toString("base64");
      return data;
    } catch (error) {
      throw Error("Error encrypting backup");
    }
  }
  decrypt(encryptedBackup) {
    try {
      const buf = Buffer.from(encryptedBackup, "base64");
      const data = (0, import_ecies.Decrypt)(Buffer.from(this.backupDecryptionKey, "hex"), buf);
      return Buffer.from(data.buffer).toString("ucs2");
    } catch (error) {
      throw Error("Error decrypting backup");
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  KeyContainer
});

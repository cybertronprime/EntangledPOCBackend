var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var recovery_exports = {};
__export(recovery_exports, {
  sendRecoveryForShare: () => sendRecoveryForShare
});
module.exports = __toCommonJS(recovery_exports);
var import_user_management_client = require("@getpara/user-management-client");
var import_KeyContainer = require("./KeyContainer.js");
function sendRecoveryForShare(_0) {
  return __async(this, arguments, function* ({
    ctx,
    userId,
    walletId,
    otherEncryptedShares = [],
    userSigner,
    ignoreRedistributingBackupEncryptedShare = false,
    emailProps = {},
    forceRefresh = false
  }) {
    if (ignoreRedistributingBackupEncryptedShare) {
      yield ctx.client.uploadUserKeyShares(
        userId,
        otherEncryptedShares.map((share) => __spreadValues({
          walletId
        }, share))
      );
      return "";
    }
    let userBackupKeyShareOptsArr;
    let recoveryPrivateKeyContainer;
    const { recoveryPublicKeys } = yield ctx.client.getRecoveryPublicKeys(userId);
    if (forceRefresh || !(recoveryPublicKeys == null ? void 0 : recoveryPublicKeys.length)) {
      recoveryPrivateKeyContainer = new import_KeyContainer.KeyContainer(walletId, "", "");
      const { recoveryPublicKeys: recoveryPublicKeys2 } = yield ctx.client.persistRecoveryPublicKeys(userId, [
        recoveryPrivateKeyContainer.getPublicEncryptionKeyHex()
      ]);
      const encryptedUserBackup = recoveryPrivateKeyContainer.encryptForSelf(userSigner);
      userBackupKeyShareOptsArr = [
        {
          walletId,
          encryptedShare: encryptedUserBackup,
          type: import_user_management_client.KeyShareType.USER,
          encryptor: import_user_management_client.EncryptorType.RECOVERY,
          recoveryPublicKeyId: recoveryPublicKeys2[0].id
        }
      ];
    } else {
      userBackupKeyShareOptsArr = recoveryPublicKeys.map((recoveryPublicKey) => {
        const { id: recoveryPublicKeyId, publicKey } = recoveryPublicKey;
        const encryptedUserBackup = import_KeyContainer.KeyContainer.encryptWithPublicKey(Buffer.from(publicKey, "hex"), userSigner);
        return {
          walletId,
          encryptedShare: encryptedUserBackup,
          type: import_user_management_client.KeyShareType.USER,
          encryptor: import_user_management_client.EncryptorType.RECOVERY,
          recoveryPublicKeyId
        };
      });
    }
    yield ctx.client.uploadUserKeyShares(userId, [
      ...otherEncryptedShares.map((share) => __spreadValues({
        walletId
      }, share)),
      ...ignoreRedistributingBackupEncryptedShare ? [] : userBackupKeyShareOptsArr
    ]);
    yield ctx.client.distributeParaShare(__spreadValues({
      userId,
      walletId,
      useDKLS: ctx.useDKLS
    }, emailProps));
    return recoveryPrivateKeyContainer ? JSON.stringify(recoveryPrivateKeyContainer) : "";
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  sendRecoveryForShare
});

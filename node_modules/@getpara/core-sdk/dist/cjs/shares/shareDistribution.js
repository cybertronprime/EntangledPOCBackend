var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var shareDistribution_exports = {};
__export(shareDistribution_exports, {
  distributeNewShare: () => distributeNewShare
});
module.exports = __toCommonJS(shareDistribution_exports);
var import_user_management_client = require("@getpara/user-management-client");
var import_utils = require("../cryptography/utils.js");
var import_recovery = require("./recovery.js");
function distributeNewShare(_0) {
  return __async(this, arguments, function* ({
    ctx,
    userId,
    walletId,
    userShare,
    ignoreRedistributingBackupEncryptedShare = false,
    emailProps = {},
    partnerId,
    protocolId
  }) {
    const publicKeysRes = yield ctx.client.getSessionPublicKeys(userId);
    const biometricEncryptedShares = publicKeysRes.data.keys.map((key) => {
      if (!key.publicKey) {
        return;
      }
      const { encryptedMessageHex, encryptedKeyHex } = (0, import_utils.encryptWithDerivedPublicKey)(key.sigDerivedPublicKey, userShare);
      return {
        encryptedShare: encryptedMessageHex,
        encryptedKey: encryptedKeyHex,
        type: import_user_management_client.KeyShareType.USER,
        encryptor: import_user_management_client.EncryptorType.BIOMETRICS,
        biometricPublicKey: key.sigDerivedPublicKey,
        partnerId,
        protocolId
      };
    }).filter(Boolean);
    const passwords = yield ctx.client.getPasswords({ userId });
    const passwordEncryptedShares = passwords.map((password) => {
      if (password.status === "PENDING") {
        return;
      }
      const { encryptedMessageHex, encryptedKeyHex } = (0, import_utils.encryptWithDerivedPublicKey)(password.sigDerivedPublicKey, userShare);
      return {
        encryptedShare: encryptedMessageHex,
        encryptedKey: encryptedKeyHex,
        type: import_user_management_client.KeyShareType.USER,
        encryptor: import_user_management_client.EncryptorType.PASSWORD,
        passwordId: password.id,
        partnerId,
        protocolId
      };
    }).filter(Boolean);
    const allEncryptedShares = [...biometricEncryptedShares, ...passwordEncryptedShares];
    return yield (0, import_recovery.sendRecoveryForShare)({
      ctx,
      userId,
      walletId,
      otherEncryptedShares: allEncryptedShares,
      userSigner: userShare,
      ignoreRedistributingBackupEncryptedShare,
      emailProps
    });
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  distributeNewShare
});

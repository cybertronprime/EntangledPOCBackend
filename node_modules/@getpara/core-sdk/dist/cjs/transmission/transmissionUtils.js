var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var transmissionUtils_exports = {};
__export(transmissionUtils_exports, {
  retrieve: () => retrieve,
  upload: () => upload
});
module.exports = __toCommonJS(transmissionUtils_exports);
var import_ecies = require("@celo/utils/lib/ecies.js");
var import_buffer = require("buffer");
var eutil = __toESM(require("@ethereumjs/util"));
var import_crypto = require("crypto");
function upload(message, userManagementClient) {
  return __async(this, null, function* () {
    let secret;
    let publicKeyUint8Array;
    while (true) {
      try {
        secret = (0, import_crypto.randomBytes)(32).toString("hex");
        publicKeyUint8Array = eutil.privateToPublic(import_buffer.Buffer.from(secret, "hex"));
        break;
      } catch (e) {
        continue;
      }
    }
    const pubkey = import_buffer.Buffer.from(publicKeyUint8Array);
    const data = (0, import_ecies.Encrypt)(pubkey, import_buffer.Buffer.from(message, "ucs2")).toString("base64");
    const {
      data: { id }
    } = yield userManagementClient.tempTrasmissionInit(data);
    return encodeURIComponent(id + "|" + secret);
  });
}
function retrieve(uriEncodedMessage, userManagementClient) {
  return __async(this, null, function* () {
    const [id, secret] = decodeURIComponent(uriEncodedMessage).split("|");
    const response = yield userManagementClient.tempTrasmission(id);
    const data = response.data.message;
    const buf = import_buffer.Buffer.from(data, "base64");
    const res = import_buffer.Buffer.from((0, import_ecies.Decrypt)(import_buffer.Buffer.from(secret, "hex"), buf).buffer).toString("ucs2");
    return res;
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  retrieve,
  upload
});

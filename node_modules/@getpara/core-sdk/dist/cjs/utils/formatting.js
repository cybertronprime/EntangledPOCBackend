var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var formatting_exports = {};
__export(formatting_exports, {
  compressPubkey: () => compressPubkey,
  decimalToHex: () => decimalToHex,
  getCosmosAddress: () => getCosmosAddress,
  hexStringToBase64: () => hexStringToBase64,
  hexToDecimal: () => hexToDecimal,
  hexToSignature: () => hexToSignature,
  hexToUint8Array: () => hexToUint8Array,
  rawSecp256k1PubkeyToRawAddress: () => rawSecp256k1PubkeyToRawAddress,
  truncateAddress: () => truncateAddress
});
module.exports = __toCommonJS(formatting_exports);
var import_encoding = require("@cosmjs/encoding");
var import_sha256 = require("@noble/hashes/sha256");
var import_ripemd160 = require("@noble/hashes/ripemd160");
var import_elliptic = __toESM(require("elliptic"));
const secp256k1 = new import_elliptic.default.ec("secp256k1");
function hexStringToBase64(hexString) {
  if (hexString.substring(0, 2) === "0x") {
    hexString = hexString.substring(2);
  }
  return Buffer.from(hexString, "hex").toString("base64");
}
function hexToSignature(hexSig) {
  return {
    r: `0x${hexSig.slice(2, 66)}`,
    s: `0x${hexSig.slice(66, 130)}`,
    v: BigInt(hexSig.slice(130, 132))
  };
}
function hexToUint8Array(hex) {
  if (hex.startsWith("0x")) {
    hex = hex.slice(2);
  }
  return new Uint8Array(Buffer.from(hex, "hex"));
}
function hexToDecimal(hex) {
  if (hex.startsWith("0x")) {
    hex = hex.slice(2);
  }
  return `${parseInt(hex, 16)}`;
}
function decimalToHex(decimal) {
  return `0x${parseInt(decimal).toString(16)}`;
}
function compressPubkey(pubkey) {
  switch (pubkey.length) {
    case 33:
      return pubkey;
    case 65:
      return Uint8Array.from(secp256k1.keyFromPublic(pubkey).getPublic(true, "array"));
    default:
      throw new Error("Invalid pubkey length");
  }
}
function rawSecp256k1PubkeyToRawAddress(pubkeyData) {
  if (pubkeyData.length !== 33) {
    throw new Error(`Invalid Secp256k1 pubkey length (compressed): ${pubkeyData.length}`);
  }
  return (0, import_ripemd160.ripemd160)((0, import_sha256.sha256)(pubkeyData));
}
function getCosmosAddress(publicKey, prefix) {
  const uncompressedPublicKey = new Uint8Array(
    Buffer.from(publicKey.startsWith("0x") ? publicKey.slice(2) : publicKey, "hex")
  );
  const compressedPublicKey = compressPubkey(uncompressedPublicKey);
  return (0, import_encoding.toBech32)(prefix, rawSecp256k1PubkeyToRawAddress(compressedPublicKey));
}
function truncateAddress(str, addressType, {
  prefix = addressType === "COSMOS" ? "cosmos" : void 0,
  targetLength
} = {}) {
  const minimum = addressType === "COSMOS" ? prefix.length : addressType === "EVM" ? 2 : 0;
  const margin = targetLength !== void 0 ? (targetLength - minimum) / 2 : 4;
  return `${str.slice(0, minimum + margin)}...${str.slice(-1 * margin)}`;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  compressPubkey,
  decimalToHex,
  getCosmosAddress,
  hexStringToBase64,
  hexToDecimal,
  hexToSignature,
  hexToUint8Array,
  rawSecp256k1PubkeyToRawAddress,
  truncateAddress
});

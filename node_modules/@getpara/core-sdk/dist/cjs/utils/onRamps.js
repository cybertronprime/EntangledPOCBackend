var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var onRamps_exports = {};
__export(onRamps_exports, {
  NETWORK_PREFIXES: () => NETWORK_PREFIXES,
  getNetworkPrefix: () => getNetworkPrefix,
  getOnRampAssets: () => getOnRampAssets,
  getOnRampNetworks: () => getOnRampNetworks,
  toAssetInfoArray: () => toAssetInfoArray
});
module.exports = __toCommonJS(onRamps_exports);
var import_user_management_client = require("@getpara/user-management-client");
function toAssetInfoArray(data) {
  const result = [];
  Object.keys(data).forEach((walletType) => {
    const networks = data[walletType];
    Object.keys(networks).forEach((network) => {
      const assets = networks[network];
      Object.keys(assets).forEach((asset) => {
        const providerInfo = assets[asset];
        result.push([walletType, network, asset, providerInfo]);
      });
    });
  });
  return result;
}
function getOnRampNetworks(data, {
  walletType,
  allowed,
  assets,
  providers,
  action
} = {}) {
  return [
    ...new Set(
      toAssetInfoArray(data).filter(
        ([type, network, asset, providerInfo]) => (!walletType || type === walletType) && (!allowed || allowed.includes(network)) && (!assets || assets.includes(asset)) && (!providers || providers.some((provider) => {
          var _a;
          return ((_a = providerInfo[provider]) == null ? void 0 : _a[1]) && (!action || providerInfo[provider][1][action]);
        }))
      ).map(([_, network]) => network)
    )
  ];
}
function getOnRampAssets(data, {
  walletType,
  network,
  allowed,
  providers,
  action
} = {}) {
  return [
    ...new Set(
      toAssetInfoArray(data).filter(
        ([t, n, a, p]) => (!walletType || t === walletType) && (!network || n === network) && (!Array.isArray(allowed) || allowed.includes(a)) && (!providers || providers.some((provider) => {
          var _a;
          return ((_a = p[provider]) == null ? void 0 : _a[1]) && (!action || p[provider][1][action]);
        }))
      ).map(([, , asset]) => asset)
    )
  ];
}
const NETWORK_PREFIXES = {
  [import_user_management_client.Network.COSMOS]: "cosmos",
  [import_user_management_client.Network.NOBLE]: "noble"
};
function getNetworkPrefix(network) {
  return NETWORK_PREFIXES[network];
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  NETWORK_PREFIXES,
  getNetworkPrefix,
  getOnRampAssets,
  getOnRampNetworks,
  toAssetInfoArray
});

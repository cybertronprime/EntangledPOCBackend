var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var phone_exports = {};
__export(phone_exports, {
  displayPhoneNumber: () => displayPhoneNumber,
  formatPhoneNumber: () => formatPhoneNumber,
  splitPhoneNumber: () => splitPhoneNumber
});
module.exports = __toCommonJS(phone_exports);
var import_libphonenumber_js = __toESM(require("libphonenumber-js"));
function formatPhoneNumber(phone, countryCode, { forDisplay = false } = {}) {
  phone = phone.toString();
  countryCode = countryCode == null ? void 0 : countryCode.toString();
  let sanitizedNumber, parsedNumber;
  if (!!countryCode) {
    sanitizedNumber = phone.replace(/\D/g, "");
    if (/^\+\d+$/.test(countryCode)) {
      countryCode = countryCode.slice(1);
    }
    parsedNumber = (0, import_libphonenumber_js.default)(sanitizedNumber, { defaultCallingCode: countryCode });
  } else {
    sanitizedNumber = `+${phone.replace(/\D/g, "")}`;
    parsedNumber = (0, import_libphonenumber_js.default)(sanitizedNumber);
  }
  if (parsedNumber == null ? void 0 : parsedNumber.isValid()) {
    return forDisplay ? parsedNumber.formatInternational() : parsedNumber.formatInternational().replace(/[^\d+]/g, "");
  }
  return null;
}
function displayPhoneNumber(phone, countryCode) {
  return formatPhoneNumber(phone, countryCode, { forDisplay: true });
}
function splitPhoneNumber(phone) {
  const parsedNumber = (0, import_libphonenumber_js.default)(phone);
  if (parsedNumber == null ? void 0 : parsedNumber.isValid()) {
    return {
      phone: parsedNumber.nationalNumber.replace(/\D/g, ""),
      countryCode: `+${parsedNumber.countryCallingCode}`
    };
  }
  throw new Error("Invalid phone number");
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  displayPhoneNumber,
  formatPhoneNumber,
  splitPhoneNumber
});

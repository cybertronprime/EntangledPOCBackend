var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var url_exports = {};
__export(url_exports, {
  constructUrl: () => constructUrl,
  getParaConnectBaseUrl: () => getParaConnectBaseUrl,
  getParaConnectDomain: () => getParaConnectDomain,
  getPortalBaseURL: () => getPortalBaseURL,
  getPortalDomain: () => getPortalDomain,
  shortenUrl: () => shortenUrl
});
module.exports = __toCommonJS(url_exports);
var import_transmissionUtils = require("../transmission/transmissionUtils.js");
var import_types = require("../types/index.js");
function getPortalDomain(env, isE2E) {
  if (isE2E) {
    return `localhost`;
  }
  switch (env) {
    case import_types.Environment.DEV:
      return "localhost";
    case import_types.Environment.SANDBOX:
      return "app.sandbox.usecapsule.com";
    case import_types.Environment.BETA:
      return "app.beta.usecapsule.com";
    case import_types.Environment.PROD:
      return "app.usecapsule.com";
    default:
      throw new Error(`env: ${env} not supported`);
  }
}
function getPortalBaseURL({ env, isE2E }, useLocalIp, isForWasm) {
  if (isE2E) {
    if (isForWasm) {
      return `https://app.sandbox.usecapsule.com`;
    }
    return `http://localhost:3003`;
  }
  const domain = getPortalDomain(env);
  if (env === import_types.Environment.DEV) {
    if (useLocalIp) {
      return `http://127.0.0.1:3003`;
    }
    return `http://${domain}:3003`;
  }
  return `https://${domain}`;
}
function getParaConnectDomain(env) {
  switch (env) {
    case import_types.Environment.DEV:
      return "localhost";
    case import_types.Environment.SANDBOX:
      return "connect.sandbox.getpara.com";
    case import_types.Environment.BETA:
      return "connect.beta.getpara.com";
    case import_types.Environment.PROD:
      return "connect.getpara.com";
    default:
      throw new Error(`env: ${env} not supported`);
  }
}
function getParaConnectBaseUrl({ env }, useLocalIp) {
  const domain = getParaConnectDomain(env);
  if (env === import_types.Environment.DEV) {
    if (useLocalIp) {
      return `http://127.0.0.1:3008`;
    }
    return `http://${domain}:3008`;
  }
  return `https://${domain}`;
}
function constructUrl({
  base,
  path,
  params = {}
}) {
  const url = new URL(path, base);
  Object.entries(params).forEach(([key, value]) => {
    if (!!value && value !== "undefined" && value !== "null") url.searchParams.set(key, value.toString());
  });
  return url.toString();
}
function shortenUrl(ctx, url) {
  return __async(this, null, function* () {
    const compressedUrl = yield (0, import_transmissionUtils.upload)(url, ctx.client);
    return constructUrl({
      base: getPortalBaseURL(ctx),
      path: `/short/${compressedUrl}`
    });
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  constructUrl,
  getParaConnectBaseUrl,
  getParaConnectDomain,
  getPortalBaseURL,
  getPortalDomain,
  shortenUrl
});

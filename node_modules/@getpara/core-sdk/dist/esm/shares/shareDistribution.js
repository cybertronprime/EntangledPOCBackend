import {
  __async
} from "../chunk-7B52C2XE.js";
import { EncryptorType, KeyShareType } from "@getpara/user-management-client";
import { encryptWithDerivedPublicKey } from "../cryptography/utils.js";
import { sendRecoveryForShare } from "./recovery.js";
function distributeNewShare(_0) {
  return __async(this, arguments, function* ({
    ctx,
    userId,
    walletId,
    userShare,
    ignoreRedistributingBackupEncryptedShare = false,
    emailProps = {},
    partnerId,
    protocolId
  }) {
    const publicKeysRes = yield ctx.client.getSessionPublicKeys(userId);
    const biometricEncryptedShares = publicKeysRes.data.keys.map((key) => {
      if (!key.publicKey) {
        return;
      }
      const { encryptedMessageHex, encryptedKeyHex } = encryptWithDerivedPublicKey(key.sigDerivedPublicKey, userShare);
      return {
        encryptedShare: encryptedMessageHex,
        encryptedKey: encryptedKeyHex,
        type: KeyShareType.USER,
        encryptor: EncryptorType.BIOMETRICS,
        biometricPublicKey: key.sigDerivedPublicKey,
        partnerId,
        protocolId
      };
    }).filter(Boolean);
    const passwords = yield ctx.client.getPasswords({ userId });
    const passwordEncryptedShares = passwords.map((password) => {
      if (password.status === "PENDING") {
        return;
      }
      const { encryptedMessageHex, encryptedKeyHex } = encryptWithDerivedPublicKey(password.sigDerivedPublicKey, userShare);
      return {
        encryptedShare: encryptedMessageHex,
        encryptedKey: encryptedKeyHex,
        type: KeyShareType.USER,
        encryptor: EncryptorType.PASSWORD,
        passwordId: password.id,
        partnerId,
        protocolId
      };
    }).filter(Boolean);
    const allEncryptedShares = [...biometricEncryptedShares, ...passwordEncryptedShares];
    return yield sendRecoveryForShare({
      ctx,
      userId,
      walletId,
      otherEncryptedShares: allEncryptedShares,
      userSigner: userShare,
      ignoreRedistributingBackupEncryptedShare,
      emailProps
    });
  });
}
export {
  distributeNewShare
};

import {
  __async
} from "../chunk-7B52C2XE.js";
import { Encrypt as ECIESEncrypt, Decrypt as ECIESDecrypt } from "@celo/utils/lib/ecies.js";
import { Buffer } from "buffer";
import * as eutil from "@ethereumjs/util";
import { randomBytes } from "crypto";
function upload(message, userManagementClient) {
  return __async(this, null, function* () {
    let secret;
    let publicKeyUint8Array;
    while (true) {
      try {
        secret = randomBytes(32).toString("hex");
        publicKeyUint8Array = eutil.privateToPublic(Buffer.from(secret, "hex"));
        break;
      } catch (e) {
        continue;
      }
    }
    const pubkey = Buffer.from(publicKeyUint8Array);
    const data = ECIESEncrypt(pubkey, Buffer.from(message, "ucs2")).toString("base64");
    const {
      data: { id }
    } = yield userManagementClient.tempTrasmissionInit(data);
    return encodeURIComponent(id + "|" + secret);
  });
}
function retrieve(uriEncodedMessage, userManagementClient) {
  return __async(this, null, function* () {
    const [id, secret] = decodeURIComponent(uriEncodedMessage).split("|");
    const response = yield userManagementClient.tempTrasmission(id);
    const data = response.data.message;
    const buf = Buffer.from(data, "base64");
    const res = Buffer.from(ECIESDecrypt(Buffer.from(secret, "hex"), buf).buffer).toString("ucs2");
    return res;
  });
}
export {
  retrieve,
  upload
};

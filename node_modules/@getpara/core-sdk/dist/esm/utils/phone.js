import "../chunk-7B52C2XE.js";
import parsePhoneNumberFromString from "libphonenumber-js";
function formatPhoneNumber(phone, countryCode, { forDisplay = false } = {}) {
  phone = phone.toString();
  countryCode = countryCode == null ? void 0 : countryCode.toString();
  let sanitizedNumber, parsedNumber;
  if (!!countryCode) {
    sanitizedNumber = phone.replace(/\D/g, "");
    if (/^\+\d+$/.test(countryCode)) {
      countryCode = countryCode.slice(1);
    }
    parsedNumber = parsePhoneNumberFromString(sanitizedNumber, { defaultCallingCode: countryCode });
  } else {
    sanitizedNumber = `+${phone.replace(/\D/g, "")}`;
    parsedNumber = parsePhoneNumberFromString(sanitizedNumber);
  }
  if (parsedNumber == null ? void 0 : parsedNumber.isValid()) {
    return forDisplay ? parsedNumber.formatInternational() : parsedNumber.formatInternational().replace(/[^\d+]/g, "");
  }
  return null;
}
function displayPhoneNumber(phone, countryCode) {
  return formatPhoneNumber(phone, countryCode, { forDisplay: true });
}
function splitPhoneNumber(phone) {
  const parsedNumber = parsePhoneNumberFromString(phone);
  if (parsedNumber == null ? void 0 : parsedNumber.isValid()) {
    return {
      phone: parsedNumber.nationalNumber.replace(/\D/g, ""),
      countryCode: `+${parsedNumber.countryCallingCode}`
    };
  }
  throw new Error("Invalid phone number");
}
export {
  displayPhoneNumber,
  formatPhoneNumber,
  splitPhoneNumber
};

import {
  __async
} from "../chunk-7B52C2XE.js";
import { upload } from "../transmission/transmissionUtils.js";
import { Environment } from "../types/index.js";
function getPortalDomain(env, isE2E) {
  if (isE2E) {
    return `localhost`;
  }
  switch (env) {
    case Environment.DEV:
      return "localhost";
    case Environment.SANDBOX:
      return "app.sandbox.usecapsule.com";
    case Environment.BETA:
      return "app.beta.usecapsule.com";
    case Environment.PROD:
      return "app.usecapsule.com";
    default:
      throw new Error(`env: ${env} not supported`);
  }
}
function getPortalBaseURL({ env, isE2E }, useLocalIp, isForWasm) {
  if (isE2E) {
    if (isForWasm) {
      return `https://app.sandbox.usecapsule.com`;
    }
    return `http://localhost:3003`;
  }
  const domain = getPortalDomain(env);
  if (env === Environment.DEV) {
    if (useLocalIp) {
      return `http://127.0.0.1:3003`;
    }
    return `http://${domain}:3003`;
  }
  return `https://${domain}`;
}
function getParaConnectDomain(env) {
  switch (env) {
    case Environment.DEV:
      return "localhost";
    case Environment.SANDBOX:
      return "connect.sandbox.getpara.com";
    case Environment.BETA:
      return "connect.beta.getpara.com";
    case Environment.PROD:
      return "connect.getpara.com";
    default:
      throw new Error(`env: ${env} not supported`);
  }
}
function getParaConnectBaseUrl({ env }, useLocalIp) {
  const domain = getParaConnectDomain(env);
  if (env === Environment.DEV) {
    if (useLocalIp) {
      return `http://127.0.0.1:3008`;
    }
    return `http://${domain}:3008`;
  }
  return `https://${domain}`;
}
function constructUrl({
  base,
  path,
  params = {}
}) {
  const url = new URL(path, base);
  Object.entries(params).forEach(([key, value]) => {
    if (!!value && value !== "undefined" && value !== "null") url.searchParams.set(key, value.toString());
  });
  return url.toString();
}
function shortenUrl(ctx, url) {
  return __async(this, null, function* () {
    const compressedUrl = yield upload(url, ctx.client);
    return constructUrl({
      base: getPortalBaseURL(ctx),
      path: `/short/${compressedUrl}`
    });
  });
}
export {
  constructUrl,
  getParaConnectBaseUrl,
  getParaConnectDomain,
  getPortalBaseURL,
  getPortalDomain,
  shortenUrl
};

import forge from 'node-forge';
import { Ctx } from '../types/index.js';
interface EncryptedShare {
    walletId: string;
    walletScheme: string;
    encryptedShare: string;
    encryptedKey: string;
    partnerId?: string;
    protocolId?: string;
}
export declare function getSHA256HashHex(str: string): string;
export declare function getPublicKeyHex(keyPair: forge.pki.rsa.KeyPair): string;
export declare function publicKeyFromHex(publicKeyHex: string): forge.pki.rsa.PublicKey;
export declare function publicKeyHexToPem(publicKeyHex: string): string;
export declare function encodePrivateKeyToPemHex(keyPair: forge.pki.rsa.KeyPair): string;
export declare function decodePrivateKeyPemHex(privateKeyPemHex: string): forge.pki.rsa.PrivateKey;
export declare function encryptPrivateKey(keyPair: forge.pki.rsa.KeyPair, key: string): Promise<string>;
export declare function decryptPrivateKey(encryptedPrivateKeyPemHex: string, key: string): Promise<forge.pki.rsa.PrivateKey>;
export declare function getAsymmetricKeyPair(ctx: Ctx, seedValue?: string): Promise<forge.pki.rsa.KeyPair>;
export declare function getPublicKeyFromSignature(ctx: Ctx, userHandle: Uint8Array): Promise<string>;
export declare function symmetricKeyEncryptMessage(message: string): {
    key: string;
    encryptedMessageHex: string;
};
export declare function decryptWithKeyPair(keyPair: forge.pki.rsa.KeyPair, encryptedMessageHex: string, encryptedKeyHex: string): string;
export declare function decryptWithPrivateKey(privateKey: forge.pki.rsa.PrivateKey, encryptedMessageHex: string, encryptedKeyHex: string): string;
export declare function getDerivedPrivateKeyAndDecrypt(ctx: Ctx, seedValue: string, encryptedShares: EncryptedShare[]): Promise<{
    walletId: string;
    walletScheme: string;
    signer: string;
    partnerId?: string;
    protocolId?: string;
}[]>;
export declare function decryptPrivateKeyAndDecryptShare(encryptionKey: string, encryptedShares: EncryptedShare[], encryptedPrivateKey: string): Promise<{
    walletId: string;
    walletScheme: string;
    signer: string;
    partnerId: string;
    protocolId?: string;
}[]>;
export declare function encryptWithDerivedPublicKey(publicKeyHex: string, message: string): {
    encryptedMessageHex: string;
    encryptedKeyHex: string;
};
export declare function hashPasswordWithSalt(password: string): {
    salt: string;
    hash: string;
};
export declare function encryptPrivateKeyWithPassword(keyPair: forge.pki.rsa.KeyPair, hashedPassword: string): Promise<string>;
export declare function decryptPrivateKeyWithPassword(encryptedPrivateKeyPemHex: string, hashedPassword: string): Promise<forge.pki.rsa.PrivateKey>;
export {};

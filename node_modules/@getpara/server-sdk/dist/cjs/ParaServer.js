var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var ParaServer_exports = {};
__export(ParaServer_exports, {
  Para: () => Para
});
module.exports = __toCommonJS(ParaServer_exports);
var import_core_sdk = __toESM(require("@getpara/core-sdk"));
var import_ServerUtils = require("./ServerUtils.js");
class Para extends import_core_sdk.default {
  constructor(envOrApiKey, apiKeyOrOpts, opts) {
    super(envOrApiKey, apiKeyOrOpts, opts);
  }
  ready() {
    return __async(this, null, function* () {
      this.isReady = true;
    });
  }
  getPlatformUtils() {
    return new import_ServerUtils.ServerUtils();
  }
  isPasskeySupported() {
    return __async(this, null, function* () {
      return false;
    });
  }
  /**
   * Claims a pregenerated wallet.
   *
   * NOTE: This function is only available on the client side.
   * When called from the server SDK, it throws an error.
   *
   * @param {Object} opts the options object.
   * @param {string} opts.pregenIdentifier - the identifier of the user claiming the wallet.
   * @param {TPregenIdentifierType} opts.pregenIdentifierType - the type of the identifier.
   * @returns {Promise<string | undefined>} A promise that rejects with an error.
   */
  claimPregenWallets(_) {
    return __async(this, null, function* () {
      throw new Error(
        "claimPregenWallets is not available in the server SDK. This function is only supported on the client side. Please ensure you are using the client SDK to call this method."
      );
    });
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Para
});

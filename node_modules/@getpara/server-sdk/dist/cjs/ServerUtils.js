var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var ServerUtils_exports = {};
__export(ServerUtils_exports, {
  ServerUtils: () => ServerUtils
});
module.exports = __toCommonJS(ServerUtils_exports);
var import_ServerLocalStorage = require("./ServerLocalStorage.js");
var import_ServerSessionStorage = require("./ServerSessionStorage.js");
var import_keygen = require("./wallet/keygen.js");
var import_signing = require("./wallet/signing.js");
var import_privateKey = require("./wallet/privateKey.js");
class ServerUtils {
  constructor() {
    this.sdkType = "SERVER";
    this.localStorage = new import_ServerLocalStorage.ServerLocalStorage();
    this.sessionStorage = new import_ServerSessionStorage.ServerSessionStorage();
    this.secureStorage = void 0;
    this.isSyncStorage = true;
    this.disableProviderModal = true;
  }
  getPrivateKey(ctx, userId, walletId, share, sessionCookie) {
    return (0, import_privateKey.getPrivateKey)(ctx, userId, walletId, share, sessionCookie);
  }
  keygen(ctx, userId, type, secretKey, sessionCookie, emailProps) {
    return (0, import_keygen.keygen)(ctx, userId, type, secretKey, sessionCookie, emailProps);
  }
  refresh(_ctx, _sessionCookie, _userId, _walletId, _share, _oldPartnerId, _newPartnerId) {
    throw new Error("Refresh function is not implemented in the ServerUtils class.");
  }
  preKeygen(ctx, partnerId, pregenIdentifier, pregenIdentifierType, type, secretKey, sessionCookie) {
    return (0, import_keygen.preKeygen)(ctx, pregenIdentifier, pregenIdentifierType, type, secretKey, false, partnerId, sessionCookie);
  }
  signMessage(ctx, userId, walletId, share, message, sessionCookie, isDKLS) {
    return (0, import_signing.signMessage)(ctx, userId, walletId, share, message, sessionCookie, isDKLS);
  }
  signTransaction(ctx, userId, walletId, share, message, chainId, sessionCookie, isDKLS) {
    return (0, import_signing.signTransaction)(ctx, userId, walletId, share, message, chainId, sessionCookie, isDKLS);
  }
  sendTransaction(ctx, userId, walletId, share, tx, chainId, sessionCookie, isDKLS) {
    return (0, import_signing.sendTransaction)(ctx, userId, walletId, share, tx, chainId, sessionCookie, isDKLS);
  }
  signHash(_address, _hash) {
    throw new Error("SignHash is not implemented in the ServerUtils class.");
  }
  ed25519Keygen(ctx, userId, sessionCookie, emailProps) {
    return (0, import_keygen.ed25519Keygen)(ctx, userId, sessionCookie, emailProps);
  }
  ed25519PreKeygen(ctx, pregenIdentifier, pregenIdentifierType, sessionCookie) {
    return (0, import_keygen.ed25519PreKeygen)(ctx, pregenIdentifier, pregenIdentifierType, sessionCookie);
  }
  ed25519Sign(ctx, userId, walletId, share, base64Bytes, sessionCookie) {
    return (0, import_signing.ed25519Sign)(ctx, userId, walletId, share, base64Bytes, sessionCookie);
  }
  openPopup(_popupUrl) {
    return __async(this, null, function* () {
      throw new Error("OpenPopup is not implemented in the ServerUtils class.");
    });
  }
  initializeWorker(ctx) {
    return __async(this, null, function* () {
      return (0, import_keygen.initializeWorker)(ctx);
    });
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ServerUtils
});

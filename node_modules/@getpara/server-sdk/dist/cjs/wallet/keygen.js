var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var keygen_exports = {};
__export(keygen_exports, {
  ed25519Keygen: () => ed25519Keygen,
  ed25519PreKeygen: () => ed25519PreKeygen,
  initializeWorker: () => initializeWorker,
  isKeygenComplete: () => isKeygenComplete,
  isPreKeygenComplete: () => isPreKeygenComplete,
  keygen: () => keygen,
  preKeygen: () => preKeygen
});
module.exports = __toCommonJS(keygen_exports);
var uuid = __toESM(require("uuid"));
var import_core_sdk = require("@getpara/core-sdk");
var import_workerWrapper = require("../workers/workerWrapper.js");
function isKeygenComplete(ctx, userId, walletId) {
  return __async(this, null, function* () {
    const wallets = yield ctx.client.getWallets(userId);
    const wallet = wallets.data.wallets.find((w) => w.id === walletId);
    return !!(wallet == null ? void 0 : wallet.address);
  });
}
function isPreKeygenComplete(ctx, pregenIdentifier, pregenIdentifierType, walletId) {
  return __async(this, null, function* () {
    const wallets = yield ctx.client.getPregenWallets({ [pregenIdentifierType]: [pregenIdentifier] });
    const wallet = wallets.wallets.find((w) => w.id === walletId);
    return !!(wallet == null ? void 0 : wallet.address);
  });
}
function keygen(ctx, userId, type, secretKey, sessionCookie, _emailProps = {}) {
  return new Promise((resolve, reject) => __async(this, null, function* () {
    const workId = uuid.v4();
    try {
      const worker = yield (0, import_workerWrapper.setupWorker)(
        ctx,
        (res) => __async(this, null, function* () {
          try {
            yield (0, import_core_sdk.waitUntilTrue)(() => __async(this, null, function* () {
              return isKeygenComplete(ctx, userId, res.walletId);
            }), 15e3, 1e3);
            resolve({
              signer: res.signer,
              walletId: res.walletId,
              recoveryShare: null
            });
          } catch (error) {
            reject(error);
          }
        }),
        (error) => {
          reject(error);
        },
        workId,
        {
          userId,
          type,
          functionType: "KEYGEN",
          disableWorkers: ctx.disableWorkers,
          disableWebSockets: ctx.disableWebSockets
        }
      );
      worker.postMessage({
        env: ctx.env,
        apiKey: ctx.apiKey,
        cosmosPrefix: ctx.cosmosPrefix,
        params: { userId, secretKey, type },
        functionType: "KEYGEN",
        offloadMPCComputationURL: ctx.offloadMPCComputationURL,
        disableWorkers: ctx.disableWorkers,
        sessionCookie,
        useDKLS: ctx.useDKLS,
        disableWebSockets: ctx.disableWebSockets,
        wasmOverride: ctx.wasmOverride,
        workId
      });
    } catch (error) {
      reject(error);
    }
  }));
}
function preKeygen(ctx, pregenIdentifier, pregenIdentifierType, type, secretKey, _skipDistribute = false, partnerId, sessionCookie) {
  return new Promise((resolve, reject) => __async(this, null, function* () {
    const workId = uuid.v4();
    try {
      const email = void 0;
      const params = { pregenIdentifier, pregenIdentifierType, secretKey, partnerId, email, type };
      if (pregenIdentifierType === "EMAIL") {
        params.email = pregenIdentifier;
      }
      const worker = yield (0, import_workerWrapper.setupWorker)(
        ctx,
        (res) => __async(this, null, function* () {
          try {
            yield (0, import_core_sdk.waitUntilTrue)(
              () => __async(this, null, function* () {
                return isPreKeygenComplete(ctx, pregenIdentifier, pregenIdentifierType, res.walletId);
              }),
              15e3,
              1e3
            );
            resolve({
              signer: res.signer,
              walletId: res.walletId,
              recoveryShare: null
            });
          } catch (error) {
            reject(error);
          }
        }),
        (error) => {
          reject(error);
        },
        workId,
        __spreadProps(__spreadValues({}, params), {
          secretKey: null,
          functionType: "PREKEYGEN",
          disableWorkers: ctx.disableWorkers,
          disableWebSockets: ctx.disableWebSockets
        })
      );
      worker.postMessage({
        env: ctx.env,
        apiKey: ctx.apiKey,
        cosmosPrefix: ctx.cosmosPrefix,
        params,
        functionType: "PREKEYGEN",
        offloadMPCComputationURL: ctx.offloadMPCComputationURL,
        disableWorkers: ctx.disableWorkers,
        sessionCookie,
        useDKLS: ctx.useDKLS,
        disableWebSockets: ctx.disableWebSockets,
        wasmOverride: ctx.wasmOverride,
        workId
      });
    } catch (error) {
      reject(error);
    }
  }));
}
function ed25519Keygen(ctx, userId, sessionCookie, _emailProps = {}) {
  return new Promise((resolve, reject) => __async(this, null, function* () {
    const workId = uuid.v4();
    try {
      const worker = yield (0, import_workerWrapper.setupWorker)(
        ctx,
        (res) => __async(this, null, function* () {
          try {
            yield (0, import_core_sdk.waitUntilTrue)(() => __async(this, null, function* () {
              return isKeygenComplete(ctx, userId, res.walletId);
            }), 15e3, 1e3);
            resolve({
              signer: res.signer,
              walletId: res.walletId,
              recoveryShare: null
            });
          } catch (error) {
            reject(error);
          }
        }),
        (error) => {
          reject(error);
        },
        workId,
        {
          userId,
          functionType: "ED25519_KEYGEN",
          disableWorkers: ctx.disableWorkers,
          disableWebSockets: ctx.disableWebSockets
        }
      );
      worker.postMessage({
        env: ctx.env,
        apiKey: ctx.apiKey,
        cosmosPrefix: ctx.cosmosPrefix,
        params: { userId },
        functionType: "ED25519_KEYGEN",
        disableWorkers: ctx.disableWorkers,
        sessionCookie,
        disableWebSockets: ctx.disableWebSockets,
        wasmOverride: ctx.wasmOverride,
        workId
      });
    } catch (error) {
      reject(error);
    }
  }));
}
function ed25519PreKeygen(ctx, pregenIdentifier, pregenIdentifierType, sessionCookie) {
  return new Promise((resolve, reject) => __async(this, null, function* () {
    const workId = uuid.v4();
    try {
      const email = void 0;
      const params = { pregenIdentifier, pregenIdentifierType, email };
      if (pregenIdentifierType === "EMAIL") {
        params.email = pregenIdentifier;
      }
      const worker = yield (0, import_workerWrapper.setupWorker)(
        ctx,
        (res) => __async(this, null, function* () {
          try {
            yield (0, import_core_sdk.waitUntilTrue)(
              () => __async(this, null, function* () {
                return isPreKeygenComplete(ctx, pregenIdentifier, pregenIdentifierType, res.walletId);
              }),
              15e3,
              1e3
            );
            resolve({
              signer: res.signer,
              walletId: res.walletId,
              recoveryShare: null
            });
          } catch (error) {
            reject(error);
          }
        }),
        (error) => {
          reject(error);
        },
        workId,
        {
          params,
          functionType: "ED25519_PREKEYGEN",
          disableWorkers: ctx.disableWorkers,
          disableWebSockets: ctx.disableWebSockets
        }
      );
      worker.postMessage({
        env: ctx.env,
        apiKey: ctx.apiKey,
        cosmosPrefix: ctx.cosmosPrefix,
        params,
        functionType: "ED25519_PREKEYGEN",
        disableWorkers: ctx.disableWorkers,
        sessionCookie,
        disableWebSockets: ctx.disableWebSockets,
        wasmOverride: ctx.wasmOverride,
        workId
      });
    } catch (error) {
      reject(error);
    }
  }));
}
function initializeWorker(ctx) {
  return __async(this, null, function* () {
    return new Promise((resolve, reject) => __async(this, null, function* () {
      const workId = uuid.v4();
      try {
        const worker = yield (0, import_workerWrapper.setupWorker)(
          ctx,
          () => __async(this, null, function* () {
            resolve();
          }),
          (error) => {
            reject(error);
          },
          workId,
          {
            functionType: "INIT",
            disableWorkers: ctx.disableWorkers,
            disableWebSockets: ctx.disableWebSockets
          }
        );
        worker.postMessage({
          env: ctx.env,
          apiKey: ctx.apiKey,
          functionType: "INIT",
          workId
        });
      } catch (error) {
        reject(error);
      }
    }));
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ed25519Keygen,
  ed25519PreKeygen,
  initializeWorker,
  isKeygenComplete,
  isPreKeygenComplete,
  keygen,
  preKeygen
});

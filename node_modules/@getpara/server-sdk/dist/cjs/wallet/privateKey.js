var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var privateKey_exports = {};
__export(privateKey_exports, {
  getPrivateKey: () => getPrivateKey
});
module.exports = __toCommonJS(privateKey_exports);
var uuid = __toESM(require("uuid"));
var import_workerWrapper = require("../workers/workerWrapper.js");
function getPrivateKey(ctx, userId, walletId, share, sessionCookie) {
  return __async(this, null, function* () {
    return new Promise((resolve, reject) => __async(this, null, function* () {
      const workId = uuid.v4();
      try {
        const worker = yield (0, import_workerWrapper.setupWorker)(
          ctx,
          (res) => __async(this, null, function* () {
            resolve(res.privateKey);
          }),
          (error) => {
            reject(error);
          },
          workId,
          {
            params: { walletId, userId },
            functionType: "GET_PRIVATE_KEY",
            disableWorkers: ctx.disableWorkers,
            disableWebSockets: ctx.disableWebSockets
          }
        );
        worker.postMessage({
          env: ctx.env,
          apiKey: ctx.apiKey,
          cosmosPrefix: ctx.cosmosPrefix,
          params: { share, walletId, userId },
          functionType: "GET_PRIVATE_KEY",
          offloadMPCComputationURL: ctx.offloadMPCComputationURL,
          disableWorkers: ctx.disableWorkers,
          sessionCookie,
          useDKLS: ctx.useDKLS,
          disableWebSockets: ctx.disableWebSockets,
          wasmOverride: ctx.wasmOverride,
          workId
        });
      } catch (error) {
        reject(error);
      }
    }));
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getPrivateKey
});

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var workerWrapper_exports = {};
__export(workerWrapper_exports, {
  resetWorker: () => resetWorker,
  setupWorker: () => setupWorker
});
module.exports = __toCommonJS(workerWrapper_exports);
var import_worker_threads = require("worker_threads");
var import_core_sdk = require("@getpara/core-sdk");
const CLEAR_WORKER_TIMEOUT_MS = 1e3 * 90;
let worker;
const resFunctionMap = {};
function removeWorkId(workId, skipClearTimeout) {
  const { timeoutId } = resFunctionMap[workId];
  delete resFunctionMap[workId];
  if (skipClearTimeout) {
    return;
  }
  clearTimeout(timeoutId);
}
function resetWorker() {
  if (worker) {
    worker.terminate();
    worker = void 0;
  }
}
function setupWorker(ctx, resFunction, errorFunction, workId, errorContext) {
  return __async(this, null, function* () {
    const timeoutId = setTimeout(() => {
      if (resFunctionMap[workId]) {
        const errorMsg = `worker operation timed out after ${CLEAR_WORKER_TIMEOUT_MS}ms for workId ${workId} and opts ${JSON.stringify(resFunctionMap[workId].errorContext)}`;
        resFunctionMap[workId].errorFn(new Error(errorMsg));
        removeWorkId(workId, true);
      }
    }, CLEAR_WORKER_TIMEOUT_MS);
    resFunctionMap[workId] = {
      fn: resFunction,
      errorFn: errorFunction,
      timeoutId,
      errorContext
    };
    if (!worker || !worker.threadId) {
      const isDeno = typeof (globalThis == null ? void 0 : globalThis.Deno) !== "undefined";
      const workerFileName = isDeno ? "mpcWorkerServer-esm.js" : "mpcWorkerServer-bundle.js";
      const workerRes = yield fetch(`${(0, import_core_sdk.getPortalBaseURL)(ctx)}/static/js/${workerFileName}`);
      worker = new import_worker_threads.Worker(yield workerRes.text(), { eval: true });
      const onmessage = (message) => __async(this, null, function* () {
        const { workId: messageWorkId } = message;
        if (!resFunctionMap[messageWorkId]) {
          console.warn(`received message for unknown workId: ${messageWorkId}`);
          return;
        }
        delete message.workId;
        try {
          yield resFunctionMap[messageWorkId].fn(message);
          removeWorkId(messageWorkId);
        } catch (error) {
          console.error(`error in worker message handler for workId ${messageWorkId}:`, error);
          if (resFunctionMap[messageWorkId]) {
            resFunctionMap[messageWorkId].errorFn(error);
            removeWorkId(messageWorkId);
          }
        }
      });
      worker.on("message", onmessage);
      worker.on("error", (err) => {
        console.error("worker error:", err);
        Object.keys(resFunctionMap).forEach((id) => {
          if (resFunctionMap[id]) {
            const errorMsg = `worker error with workId ${id} and opts ${JSON.stringify(resFunctionMap[id].errorContext)}: ${err.message}`;
            resFunctionMap[id].errorFn(new Error(errorMsg));
            removeWorkId(id);
          }
        });
      });
      worker.on("exit", (code) => {
        console.error(`worker stopped with exit code ${code}`);
        Object.keys(resFunctionMap).forEach((id) => {
          if (resFunctionMap[id]) {
            resFunctionMap[id].errorFn(new Error(`worker exited unexpectedly with code ${code}`));
            removeWorkId(id);
          }
        });
        worker = void 0;
      });
    }
    return worker;
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  resetWorker,
  setupWorker
});

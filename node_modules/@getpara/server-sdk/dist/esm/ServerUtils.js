import "./chunk-FTA5RKYX.js";
import { ServerLocalStorage } from "./ServerLocalStorage.js";
import { ServerSessionStorage } from "./ServerSessionStorage.js";
import { keygen, preKeygen, ed25519Keygen, ed25519PreKeygen, initializeWorker } from "./wallet/keygen.js";
import { signMessage, sendTransaction, signTransaction, ed25519Sign } from "./wallet/signing.js";
import { getPrivateKey } from "./wallet/privateKey.js";
class ServerUtils {
  constructor() {
    this.sdkType = "SERVER";
    this.localStorage = new ServerLocalStorage();
    this.sessionStorage = new ServerSessionStorage();
    this.secureStorage = void 0;
    this.isSyncStorage = true;
    this.disableProviderModal = true;
  }
  getPrivateKey(ctx, userId, walletId, share, sessionCookie) {
    return getPrivateKey(ctx, userId, walletId, share, sessionCookie);
  }
  keygen(ctx, userId, type, secretKey, sessionCookie, emailProps) {
    return keygen(ctx, userId, type, secretKey, sessionCookie, emailProps);
  }
  refresh(_ctx, _sessionCookie, _userId, _walletId, _share, _oldPartnerId, _newPartnerId) {
    throw new Error("Refresh function is not implemented in the ServerUtils class.");
  }
  preKeygen(ctx, partnerId, pregenIdentifier, pregenIdentifierType, type, secretKey, sessionCookie) {
    return preKeygen(ctx, pregenIdentifier, pregenIdentifierType, type, secretKey, false, partnerId, sessionCookie);
  }
  signMessage(ctx, userId, walletId, share, message, sessionCookie, isDKLS) {
    return signMessage(ctx, userId, walletId, share, message, sessionCookie, isDKLS);
  }
  signTransaction(ctx, userId, walletId, share, message, chainId, sessionCookie, isDKLS) {
    return signTransaction(ctx, userId, walletId, share, message, chainId, sessionCookie, isDKLS);
  }
  sendTransaction(ctx, userId, walletId, share, tx, chainId, sessionCookie, isDKLS) {
    return sendTransaction(ctx, userId, walletId, share, tx, chainId, sessionCookie, isDKLS);
  }
  signHash(_address, _hash) {
    throw new Error("SignHash is not implemented in the ServerUtils class.");
  }
  ed25519Keygen(ctx, userId, sessionCookie, emailProps) {
    return ed25519Keygen(ctx, userId, sessionCookie, emailProps);
  }
  ed25519PreKeygen(ctx, pregenIdentifier, pregenIdentifierType, sessionCookie) {
    return ed25519PreKeygen(ctx, pregenIdentifier, pregenIdentifierType, sessionCookie);
  }
  ed25519Sign(ctx, userId, walletId, share, base64Bytes, sessionCookie) {
    return ed25519Sign(ctx, userId, walletId, share, base64Bytes, sessionCookie);
  }
  async openPopup(_popupUrl) {
    throw new Error("OpenPopup is not implemented in the ServerUtils class.");
  }
  async initializeWorker(ctx) {
    return initializeWorker(ctx);
  }
}
export {
  ServerUtils
};

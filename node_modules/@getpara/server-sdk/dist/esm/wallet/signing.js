import "../chunk-FTA5RKYX.js";
import * as uuid from "uuid";
import { setupWorker } from "../workers/workerWrapper.js";
async function signTransaction(ctx, userId, walletId, share, tx, chainId, sessionCookie, isDKLS) {
  return new Promise(async (resolve, reject) => {
    const workId = uuid.v4();
    try {
      const worker = await setupWorker(
        ctx,
        async (sendTransactionRes) => {
          resolve(sendTransactionRes);
        },
        (error) => {
          reject(error);
        },
        workId,
        {
          params: { walletId, userId, tx, chainId },
          functionType: "SIGN_TRANSACTION",
          disableWorkers: ctx.disableWorkers,
          disableWebSockets: ctx.disableWebSockets
        }
      );
      worker.postMessage({
        env: ctx.env,
        apiKey: ctx.apiKey,
        cosmosPrefix: ctx.cosmosPrefix,
        params: { share, walletId, userId, tx, chainId },
        functionType: "SIGN_TRANSACTION",
        offloadMPCComputationURL: ctx.offloadMPCComputationURL,
        disableWorkers: ctx.disableWorkers,
        sessionCookie,
        useDKLS: isDKLS,
        disableWebSockets: ctx.disableWebSockets,
        wasmOverride: ctx.wasmOverride,
        workId
      });
    } catch (error) {
      reject(error);
    }
  });
}
async function sendTransaction(ctx, userId, walletId, share, tx, chainId, sessionCookie, isDKLS) {
  return new Promise(async (resolve, reject) => {
    const workId = uuid.v4();
    try {
      const worker = await setupWorker(
        ctx,
        async (sendTransactionRes) => {
          resolve(sendTransactionRes);
        },
        (error) => {
          reject(error);
        },
        workId,
        {
          params: { walletId, userId, tx, chainId },
          functionType: "SEND_TRANSACTION",
          disableWorkers: ctx.disableWorkers,
          disableWebSockets: ctx.disableWebSockets
        }
      );
      worker.postMessage({
        env: ctx.env,
        apiKey: ctx.apiKey,
        params: { share, walletId, userId, tx, chainId },
        functionType: "SEND_TRANSACTION",
        offloadMPCComputationURL: ctx.offloadMPCComputationURL,
        disableWorkers: ctx.disableWorkers,
        sessionCookie,
        useDKLS: isDKLS,
        disableWebSockets: ctx.disableWebSockets,
        wasmOverride: ctx.wasmOverride,
        workId
      });
    } catch (error) {
      reject(error);
    }
  });
}
async function signMessage(ctx, userId, walletId, share, message, sessionCookie, isDKLS) {
  return new Promise(async (resolve, reject) => {
    const workId = uuid.v4();
    try {
      const worker = await setupWorker(
        ctx,
        async (signMessageRes) => {
          resolve(signMessageRes);
        },
        (error) => {
          reject(error);
        },
        workId,
        {
          params: { walletId, userId, message },
          functionType: "SIGN_MESSAGE",
          disableWorkers: ctx.disableWorkers,
          disableWebSockets: ctx.disableWebSockets
        }
      );
      worker.postMessage({
        env: ctx.env,
        apiKey: ctx.apiKey,
        params: { share, walletId, userId, message },
        functionType: "SIGN_MESSAGE",
        offloadMPCComputationURL: ctx.offloadMPCComputationURL,
        disableWorkers: ctx.disableWorkers,
        sessionCookie,
        useDKLS: isDKLS,
        disableWebSockets: ctx.disableWebSockets,
        wasmOverride: ctx.wasmOverride,
        workId
      });
    } catch (error) {
      reject(error);
    }
  });
}
async function ed25519Sign(ctx, userId, walletId, share, base64Bytes, sessionCookie) {
  return new Promise(async (resolve, reject) => {
    const workId = uuid.v4();
    try {
      const worker = await setupWorker(
        ctx,
        async (signMessageRes) => {
          resolve(signMessageRes);
        },
        (error) => {
          reject(error);
        },
        workId,
        {
          params: { walletId, userId, base64Bytes },
          functionType: "ED25519_SIGN",
          disableWorkers: ctx.disableWorkers,
          disableWebSockets: ctx.disableWebSockets
        }
      );
      worker.postMessage({
        env: ctx.env,
        apiKey: ctx.apiKey,
        params: { share, walletId, userId, base64Bytes },
        functionType: "ED25519_SIGN",
        offloadMPCComputationURL: ctx.offloadMPCComputationURL,
        disableWorkers: ctx.disableWorkers,
        sessionCookie,
        disableWebSockets: ctx.disableWebSockets,
        wasmOverride: ctx.wasmOverride,
        workId
      });
    } catch (error) {
      reject(error);
    }
  });
}
export {
  ed25519Sign,
  sendTransaction,
  signMessage,
  signTransaction
};

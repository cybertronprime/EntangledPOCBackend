import type { Ctx, SignatureRes, PlatformUtils, TPregenIdentifierType, TWalletType } from '@getpara/core-sdk';
import { BackupKitEmailProps, SDKType } from '@getpara/user-management-client';
import { ServerLocalStorage } from './ServerLocalStorage.js';
import { ServerSessionStorage } from './ServerSessionStorage.js';
export declare class ServerUtils implements PlatformUtils {
    sdkType: SDKType;
    getPrivateKey(ctx: Ctx, userId: string, walletId: string, share: string, sessionCookie: string): Promise<string>;
    keygen(ctx: Ctx, userId: string, type: Exclude<TWalletType, 'SOLANA'>, secretKey: string | null, sessionCookie: string, emailProps?: BackupKitEmailProps): Promise<{
        signer: string;
        walletId: string;
    }>;
    refresh(_ctx: Ctx, _sessionCookie: string, _userId: string, _walletId: string, _share: string, _oldPartnerId?: string, _newPartnerId?: string): Promise<{
        signer: string;
    }>;
    preKeygen(ctx: Ctx, partnerId: string, pregenIdentifier: string, pregenIdentifierType: TPregenIdentifierType, type: Exclude<TWalletType, 'SOLANA'>, secretKey: string | null, // should be acceptable as null in RN as we don't pre-gen them
    sessionCookie: string): Promise<{
        signer: string;
        walletId: string;
    }>;
    signMessage(ctx: Ctx, userId: string, walletId: string, share: string, message: string, sessionCookie: string, isDKLS?: boolean): Promise<SignatureRes>;
    signTransaction(ctx: Ctx, userId: string, walletId: string, share: string, message: string, chainId: string, sessionCookie: string, isDKLS?: boolean): Promise<SignatureRes>;
    sendTransaction(ctx: Ctx, userId: string, walletId: string, share: string, tx: string, chainId: string, sessionCookie: string, isDKLS?: boolean): Promise<SignatureRes>;
    signHash(_address: string, _hash: string): Promise<{
        v: number;
        r: Buffer;
        s: Buffer;
    }>;
    ed25519Keygen(ctx: Ctx, userId: string, sessionCookie: string, emailProps?: BackupKitEmailProps): Promise<{
        signer: string;
        walletId: string;
    }>;
    ed25519PreKeygen(ctx: Ctx, pregenIdentifier: string, pregenIdentifierType: TPregenIdentifierType, sessionCookie: string): Promise<{
        signer: string;
        walletId: string;
    }>;
    ed25519Sign(ctx: Ctx, userId: string, walletId: string, share: string, base64Bytes: string, sessionCookie: string): Promise<SignatureRes>;
    localStorage: ServerLocalStorage;
    sessionStorage: ServerSessionStorage;
    secureStorage: any;
    isSyncStorage: boolean;
    disableProviderModal: boolean;
    openPopup(_popupUrl: string): Promise<Window>;
    initializeWorker(ctx: Ctx): Promise<void>;
}

import { Ctx, TPregenIdentifierType, SignatureRes, TWalletType } from '@getpara/core-sdk';
export declare function ed25519Keygen(ctx: Ctx, userId: string): Promise<{
    signer: string;
    walletId: string;
}>;
export declare function ed25519PreKeygen(ctx: Ctx, pregenIdentifier: string, pregenIdentifierType: TPregenIdentifierType): Promise<{
    signer: string;
    walletId: string;
}>;
export declare function ed25519Sign(ctx: Ctx, share: string, userId: string, walletId: string, base64Bytes: string): Promise<SignatureRes>;
export declare function keygen(ctx: Ctx, userId: string, type: Exclude<TWalletType, 'SOLANA'>, secretKey: string | null): Promise<{
    signer: string;
    walletId: string;
}>;
export declare function preKeygen(ctx: Ctx, partnerId: string, pregenIdentifier: string, pregenIdentifierType: TPregenIdentifierType, type: Exclude<TWalletType, 'SOLANA'>, secretKey: string | null): Promise<{
    signer: string;
    walletId: string;
}>;
export declare function signMessage(ctx: Ctx, share: string, walletId: string, userId: string, message: string): Promise<SignatureRes>;
export declare function signTransaction(ctx: Ctx, share: string, walletId: string, userId: string, tx: string, chainId: string): Promise<SignatureRes>;
export declare function sendTransaction(ctx: Ctx, share: string, walletId: string, userId: string, tx: string, chainId: string): Promise<SignatureRes>;
export declare function refresh(ctx: Ctx, share: string, walletId: string, userId: string): Promise<string>;
export declare function getPrivateKey(ctx: Ctx, share: string, walletId: string, userId: string): Promise<string>;

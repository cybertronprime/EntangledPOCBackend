import { Ctx, Environment } from '@getpara/core-sdk';
interface Message {
    env: Environment;
    apiKey: string;
    cosmosPrefix?: string;
    offloadMPCComputationURL?: string;
    disableWorkers?: boolean;
    functionType: string;
    params: Record<string, any>;
    sessionCookie?: string;
    useDKLS?: boolean;
    disableWebSockets?: boolean;
    workId: string;
}
export declare function requestWasmWithRetries(ctx: Ctx, retries?: number): Promise<import("axios").AxiosResponse<any, any>>;
/**
 * Executes an operation with retry capabilities
 * @param operation The function to execute
 * @param maxRetries Maximum number of retries (default: 2)
 * @param timeoutMs Timeout in milliseconds (default: 10000)
 * @returns The result of the operation
 */
export declare function withRetry<T>(operation: () => Promise<T>, maxRetries?: number, timeoutMs?: number): Promise<T>;
export declare function handleMessage(e: {
    data: Message;
}): Promise<any>;
export {};

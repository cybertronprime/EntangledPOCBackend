var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var utils_exports = {};
__export(utils_exports, {
  extractAuthInfo: () => extractAuthInfo,
  extractWalletRef: () => extractWalletRef,
  fromAccountMetadata: () => fromAccountMetadata,
  fromLinkedAccounts: () => fromLinkedAccounts,
  isCustomId: () => isCustomId,
  isDiscord: () => isDiscord,
  isEmail: () => isEmail,
  isExternalWallet: () => isExternalWallet,
  isExternalWalletAddress: () => isExternalWalletAddress,
  isFarcaster: () => isFarcaster,
  isGuestId: () => isGuestId,
  isPhone: () => isPhone,
  isPhoneLegacy: () => isPhoneLegacy,
  isPregenAuth: () => isPregenAuth,
  isPrimary: () => isPrimary,
  isTelegram: () => isTelegram,
  isUserId: () => isUserId,
  isVerifiedAuth: () => isVerifiedAuth,
  isWalletId: () => isWalletId,
  isX: () => isX,
  toPregenIds: () => toPregenIds,
  toPregenTypeAndId: () => toPregenTypeAndId
});
module.exports = __toCommonJS(utils_exports);
var import_libphonenumber_js = __toESM(require("libphonenumber-js"));
function isWalletId(params) {
  return !!params.walletId && !params.externalWalletAddress;
}
function isExternalWalletAddress(params) {
  return !!params.externalWalletAddress && !params.walletId;
}
function extractWalletRef(params) {
  if (isWalletId(params)) {
    return ["walletId", params.walletId];
  } else if (isExternalWalletAddress(params)) {
    return ["externalWalletAddress", params.externalWalletAddress];
  }
  throw new Error("invalid wallet params");
}
function isValid(s) {
  return !!s && s !== "null" && s !== "undefined" && s !== "";
}
function isEmail(params) {
  return !!params && isValid(params.email) && !isValid(params.phone) && !isValid(params.countryCode) && !isValid(params.farcasterUsername) && !isValid(params.telegramUserId) && !isValid(params.xUsername) && !isValid(params.discordUsername) && !isValid(params.customId) && !isValid(params.externalWalletAddress);
}
function isPhone(params) {
  return !!params && isValid(params.phone) && /^\+\d+$/.test(params.phone) && !isValid(params.countryCode) && !isValid(params.email) && !isValid(params.farcasterUsername) && !isValid(params.telegramUserId) && !isValid(params.xUsername) && !isValid(params.discordUsername) && !isValid(params.customId) && !isValid(params.userId) && !isValid(params.externalWalletAddress);
}
function isPhoneLegacy(params) {
  return !!params && isValid(params.phone) && isValid(params.countryCode) && !isValid(params.email) && !isValid(params.farcasterUsername) && !isValid(params.telegramUserId) && !isValid(params.xUsername) && !isValid(params.discordUsername) && !isValid(params.customId) && !isValid(params.externalWalletAddress);
}
function isFarcaster(params) {
  return !!params && isValid(params.farcasterUsername) && !isValid(params.email) && !isValid(params.phone) && !isValid(params.countryCode) && !isValid(params.telegramUserId) && !isValid(params.xUsername) && !isValid(params.discordUsername) && !isValid(params.customId) && !isValid(params.externalWalletAddress);
}
function isTelegram(params) {
  return !!params && isValid(params.telegramUserId) && !isValid(params.email) && !isValid(params.phone) && !isValid(params.countryCode) && !isValid(params.farcasterUsername) && !isValid(params.xUsername) && !isValid(params.discordUsername) && !isValid(params.customId) && !isValid(params.externalWalletAddress);
}
function isExternalWallet(params) {
  return !!params && isValid(params.externalWalletAddress) && !isValid(params.email) && !isValid(params.phone) && !isValid(params.countryCode) && !isValid(params.farcasterUsername) && !isValid(params.telegramUserId) && !isValid(params.xUsername) && !isValid(params.discordUsername) && !isValid(params.customId);
}
function isX(params) {
  return !!params && isValid(params.xUsername) && !isValid(params.email) && !isValid(params.phone) && !isValid(params.countryCode) && !isValid(params.farcasterUsername) && !isValid(params.telegramUserId) && !isValid(params.discordUsername) && !isValid(params.customId) && !isValid(params.externalWalletAddress);
}
function isDiscord(params) {
  return !!params && isValid(params.discordUsername) && !isValid(params.email) && !isValid(params.phone) && !isValid(params.countryCode) && !isValid(params.farcasterUsername) && !isValid(params.telegramUserId) && !isValid(params.xUsername) && !isValid(params.customId) && !isValid(params.externalWalletAddress);
}
function isCustomId(params) {
  return !!params && isValid(params.customId) && !isValid(params.email) && !isValid(params.phone) && !isValid(params.email) && !isValid(params.phone) && !isValid(params.countryCode) && !isValid(params.farcasterUsername) && !isValid(params.telegramUserId) && !isValid(params.xUsername) && !isValid(params.discordUsername) && !isValid(params.externalWalletAddress);
}
function isGuestId(params) {
  return !!params && isValid(params.guestId) && !isValid(params.email) && !isValid(params.phone) && !isValid(params.countryCode) && !isValid(params.farcasterUsername) && !isValid(params.xUsername) && !isValid(params.discordUsername) && !isValid(params.customId) && !isValid(params.externalWalletAddress);
}
function isUserId(params) {
  return !!params && isValid(params.userId) && !isValid(params.email) && !isValid(params.phone) && !isValid(params.countryCode) && !isValid(params.farcasterUsername) && !isValid(params.xUsername) && !isValid(params.discordUsername) && !isValid(params.customId) && !isValid(params.telegramUserId) && !isValid(params.externalWalletAddress);
}
function isPrimary(params) {
  return isEmail(params) || isPhone(params) || isFarcaster(params) || isTelegram(params) || isExternalWallet(params);
}
function isVerifiedAuth(params) {
  return isEmail(params) || isPhone(params);
}
function isPregenAuth(params) {
  return isPrimary(params) && !isExternalWallet(params) || isX(params) || isDiscord(params) || isCustomId(params);
}
function extractAuthInfo(obj, { allowUserId = false, allowPregen = false, isRequired = false } = {}) {
  obj = Object.entries(obj || {}).reduce((acc, [k, v]) => {
    return __spreadValues(__spreadValues({}, acc), !!v && v !== "null" && v !== "undefined" && v !== "" ? { [k]: v } : {});
  }, {});
  let error;
  switch (true) {
    case isEmail(obj):
      return {
        auth: { email: obj.email },
        authType: "email",
        identifier: obj.email
      };
    case isPhone(obj):
      if (!(0, import_libphonenumber_js.default)(obj.phone)) {
        error = "invalid phone number";
        break;
      }
      return {
        auth: { phone: obj.phone },
        authType: "phone",
        identifier: obj.phone
      };
    case isPhoneLegacy(obj):
      const identifier = `${obj.countryCode.startsWith("+") ? "" : "+"}${obj.countryCode}${obj.phone}`;
      if (!(0, import_libphonenumber_js.default)(identifier)) {
        error = "invalid phone number";
        break;
      }
      return {
        auth: { phone: identifier },
        authType: "phone",
        identifier
      };
    case isFarcaster(obj):
      return {
        auth: { farcasterUsername: obj.farcasterUsername },
        authType: "farcaster",
        identifier: obj.farcasterUsername
      };
    case isTelegram(obj):
      return {
        auth: { telegramUserId: obj.telegramUserId },
        authType: "telegram",
        identifier: obj.telegramUserId
      };
    case isExternalWallet(obj):
      return {
        auth: { externalWalletAddress: obj.externalWalletAddress },
        authType: "externalWallet",
        identifier: obj.externalWalletAddress
      };
    case (allowPregen && isX(obj)):
      return {
        auth: { xUsername: obj.xUsername },
        authType: "x",
        identifier: obj.xUsername
      };
    case (allowPregen && isDiscord(obj)):
      return {
        auth: { discordUsername: obj.discordUsername },
        authType: "discord",
        identifier: obj.discordUsername
      };
    case (allowPregen && isCustomId(obj)):
      return {
        auth: { customId: obj.customId },
        authType: "customId",
        identifier: obj.customId
      };
    case (allowPregen && isGuestId(obj)):
      return {
        auth: { guestId: obj.guestId },
        authType: "guestId",
        identifier: obj.guestId
      };
    case (isUserId(obj) && allowUserId):
      return {
        auth: { userId: obj.userId },
        authType: "userId",
        identifier: obj.userId
      };
    default:
      break;
  }
  if (isRequired) {
    throw new Error(error != null ? error : "invalid auth object");
  }
  return void 0;
}
function toPregenTypeAndId(auth) {
  const { authType, identifier: pregenIdentifier } = extractAuthInfo(auth, { isRequired: true, allowPregen: true });
  const pregenIdentifierType = {
    email: "EMAIL",
    phone: "PHONE",
    farcaster: "FARCASTER",
    telegram: "TELEGRAM",
    discord: "DISCORD",
    x: "TWITTER",
    customId: "CUSTOM_ID",
    guestId: "GUEST_ID"
  }[authType];
  return [pregenIdentifierType, pregenIdentifier];
}
function toPregenIds(auth) {
  const [pregenIdentifierType, pregenIdentifier] = toPregenTypeAndId(auth);
  return { [pregenIdentifierType]: [pregenIdentifier] };
}
function fromAccountMetadata(obj) {
  return Object.entries(obj || {}).reduce(
    (acc, [method, obj2]) => __spreadProps(__spreadValues({}, acc), {
      [method]: __spreadProps(__spreadValues({}, obj2), {
        date: new Date(obj2.date)
      })
    }),
    {}
  );
}
function fromLinkedAccounts({ primary, linked }) {
  return {
    primary: primary.map((account) => __spreadProps(__spreadValues({}, account), {
      date: new Date(account.date)
    })),
    linked: linked.map((account) => __spreadProps(__spreadValues({}, account), {
      date: new Date(account.date)
    }))
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  extractAuthInfo,
  extractWalletRef,
  fromAccountMetadata,
  fromLinkedAccounts,
  isCustomId,
  isDiscord,
  isEmail,
  isExternalWallet,
  isExternalWalletAddress,
  isFarcaster,
  isGuestId,
  isPhone,
  isPhoneLegacy,
  isPregenAuth,
  isPrimary,
  isTelegram,
  isUserId,
  isVerifiedAuth,
  isWalletId,
  isX,
  toPregenIds,
  toPregenTypeAndId
});

import { PartnerEntity } from './partner.js';
/** @deprecated use the string union type `TWalletScheme` instead */
export declare enum WalletScheme {
    DKLS = "DKLS",
    CGGMP = "CGGMP",
    ED25519 = "ED25519"
}
export declare const WALLET_SCHEMES: readonly ["DKLS", "CGGMP", "ED25519"];
export type TWalletScheme = (typeof WALLET_SCHEMES)[number];
/** @deprecated use the string union type `TWalletType` instead */
export declare enum WalletType {
    EVM = "EVM",
    SOLANA = "SOLANA",
    COSMOS = "COSMOS"
}
export declare const WALLET_TYPES: readonly ["EVM", "SOLANA", "COSMOS"];
export type TWalletType = (typeof WALLET_TYPES)[number];
export declare enum Chain {
    ETH = "ETH",
    CELO = "CELO",
    MATIC = "MATIC"
}
export declare enum Network {
    ETHEREUM = "ETHEREUM",
    SEPOLIA = "SEPOLIA",
    ARBITRUM = "ARBITRUM",
    BASE = "BASE",
    OPTIMISM = "OPTIMISM",
    POLYGON = "POLYGON",
    SOLANA = "SOLANA",
    COSMOS = "COSMOS",
    CELO = "CELO",
    NOBLE = "NOBLE",
    SOLANA_DEVNET = "SOLANA_DEVNET",
    BERACHAIN = "BERACHAIN"
}
export type WalletRef = 'walletId' | 'externalWalletAddress';
export type WalletParams = Partial<{
    walletId?: string;
    externalWalletAddress?: string;
}>;
export type EmbeddedWalletType = Exclude<TWalletType, never>;
export type ExternalWalletType = Exclude<TWalletType, never>;
export declare const PREGEN_IDENTIFIER_TYPES: readonly ["EMAIL", "PHONE", "CUSTOM_ID", "GUEST_ID", "DISCORD", "TWITTER", "TELEGRAM", "FARCASTER"];
export type TPregenIdentifierType = (typeof PREGEN_IDENTIFIER_TYPES)[number];
export type PregenIds = Partial<Record<TPregenIdentifierType, string[]>>;
export interface WalletEntity {
    address: string | null;
    createdAt: string;
    isPregen?: boolean;
    pregenIdentifier: string;
    pregenIdentifierType: TPregenIdentifierType;
    id: string;
    keyGenComplete: boolean;
    name: string | null;
    partnerId: string;
    partner?: PartnerEntity;
    publicKey: string | null;
    scheme: string;
    type: TWalletType;
    updatedAt: string;
    userId: string | null;
    lastUsedAt: string | null;
    lastUsedPartnerId?: string;
    lastUsedPartner?: PartnerEntity;
    ensName?: string | null;
    ensAvatar?: string | null;
}
export type CurrentWalletIds = Partial<Record<TWalletType, string[]>>;
export declare const NON_ED25519: string[];
export type SupportedWalletTypes = {
    type: TWalletType;
    optional?: boolean;
}[];
export declare const EVM_WALLETS: readonly ["METAMASK", "RAINBOW", "COINBASE", "WALLETCONNECT", "FARCASTER", "ZERION", "SAFE", "RABBY", "OKX", "HAHA", "BACKPACK", "PHANTOM", "VALORA"];
export declare const SOLANA_WALLETS: readonly ["PHANTOM", "GLOW", "BACKPACK", "SOLFLARE"];
export declare const COSMOS_WALLETS: readonly ["KEPLR", "LEAP", "COSMOSTATION"];
export declare const EXTERNAL_WALLET_TYPES: readonly ("FARCASTER" | "METAMASK" | "RAINBOW" | "COINBASE" | "WALLETCONNECT" | "ZERION" | "SAFE" | "RABBY" | "OKX" | "HAHA" | "BACKPACK" | "PHANTOM" | "VALORA" | "GLOW" | "SOLFLARE" | "KEPLR" | "LEAP" | "COSMOSTATION")[];
export type TExternalWallet = (typeof EXTERNAL_WALLET_TYPES)[number];

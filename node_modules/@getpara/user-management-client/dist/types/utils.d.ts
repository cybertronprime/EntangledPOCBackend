import { Auth, AuthInfo, AuthParams, PrimaryAuth, PrimaryAuthInfo, VerifiedAuth, WalletParams, WalletRef } from './types/index.js';
import { AccountMetadata, AccountMetadataKey, LinkedAccounts, PregenAuth, PregenAuthInfo, PregenOrGuestAuth } from './types/auth.js';
import { PregenIds, TPregenIdentifierType } from './types/wallet.js';
export declare function isWalletId(params: WalletParams): params is {
    walletId: string;
};
export declare function isExternalWalletAddress(params: WalletParams): params is {
    externalWalletAddress: string;
};
export declare function extractWalletRef(params: WalletParams): [WalletRef, string];
export declare function isEmail(params: AuthParams | undefined): params is Auth<'email'>;
export declare function isPhone(params: AuthParams | undefined): params is Auth<'phone'>;
export declare function isPhoneLegacy(params: AuthParams | undefined): params is Auth<'phoneLegacy'>;
export declare function isFarcaster(params: AuthParams | undefined): params is Auth<'farcaster'>;
export declare function isTelegram(params: AuthParams | undefined): params is Auth<'telegram'>;
export declare function isExternalWallet(params: AuthParams | undefined): params is Auth<'externalWallet'>;
export declare function isX(params: AuthParams | undefined): params is Auth<'x'>;
export declare function isDiscord(params: AuthParams | undefined): params is Auth<'discord'>;
export declare function isCustomId(params: AuthParams | undefined): params is Auth<'customId'>;
export declare function isGuestId(params: AuthParams | undefined): params is Auth<'guestId'>;
export declare function isUserId(params: AuthParams | undefined): params is Auth<'userId'>;
export declare function isPrimary(params: AuthParams | undefined): params is PrimaryAuth;
export declare function isVerifiedAuth(params: AuthParams | undefined): params is VerifiedAuth;
export declare function isPregenAuth(params: AuthParams | undefined): params is PregenAuth;
type ExtractAuthOpts = {
    allowUserId?: boolean;
    allowPregen?: boolean;
    isRequired?: boolean;
};
export declare function extractAuthInfo(obj: AuthParams): PrimaryAuthInfo | undefined;
export declare function extractAuthInfo(obj: AuthParams, opts: ExtractAuthOpts & {
    allowUserId: false | undefined;
}): PrimaryAuthInfo | undefined;
export declare function extractAuthInfo(obj: AuthParams, opts: ExtractAuthOpts & {
    isRequired: true;
    allowPregen?: undefined | false;
}): PrimaryAuthInfo;
export declare function extractAuthInfo(obj: AuthParams, opts: ExtractAuthOpts & {
    allowUserId: true;
}): PrimaryAuthInfo | AuthInfo<'userId'> | undefined;
export declare function extractAuthInfo(obj: AuthParams, opts: ExtractAuthOpts & {
    allowUserId: true;
    isRequired: true;
}): PrimaryAuthInfo | AuthInfo<'userId'>;
export declare function extractAuthInfo(obj: AuthParams, opts: ExtractAuthOpts & {
    allowPregen: true;
}): PregenAuthInfo | undefined;
export declare function extractAuthInfo(obj: AuthParams, opts: ExtractAuthOpts & {
    allowPregen: true;
    isRequired: true;
}): PregenAuthInfo;
export declare function toPregenTypeAndId(auth: PregenOrGuestAuth): [TPregenIdentifierType, string];
export declare function toPregenIds(auth: PregenAuth): PregenIds;
export declare function fromAccountMetadata(obj: Partial<Record<AccountMetadataKey, {
    date: string;
    metadata: object;
}>> | undefined): AccountMetadata;
export declare function fromLinkedAccounts({ primary, linked }: LinkedAccounts<string>): LinkedAccounts<Date>;
export {};
